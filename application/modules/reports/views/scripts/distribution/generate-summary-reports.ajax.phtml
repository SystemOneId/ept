<?php
require_once('tcpdf/tcpdf.php');
$config = new Zend_Config_Ini(APPLICATION_PATH . DIRECTORY_SEPARATOR . "configs" . DIRECTORY_SEPARATOR . "config.ini", APPLICATION_ENV);
$fileSafeShipmentCode = str_replace( ' ', '-', str_replace(array_merge(
        array_map('chr', range(0, 31)),
        array('<', '>', ':', '"', '/', '\\', '|', '?', '*')
        ), '', $this->result['shipment']['shipment_code']));
$reportsFolderPath = UPLOAD_PATH . DIRECTORY_SEPARATOR . 'reports';
$shipmentFolderPath = $reportsFolderPath . DIRECTORY_SEPARATOR . $fileSafeShipmentCode;
if ($this->result['shipment'] != "") {
    if ($this->result['shipment']['scheme_type'] != 'eid') {
        require_once('libchart/classes/libchart.php');
        $chart = new VerticalBarChart(700, 400);
    }
    if (!file_exists($reportsFolderPath) && !is_dir($reportsFolderPath)) {
        mkdir($reportsFolderPath);
    }
    if (!file_exists($shipmentFolderPath) && !is_dir($shipmentFolderPath)) {
        mkdir($shipmentFolderPath);
    }

    class MYPDF extends TCPDF {
        public function setSchemeName($header, $schemeName, $logo,$logoRight,$comingFrom,$schemeType) {
            $this->scheme_name = $schemeName;
            $this->header = $header;
            $this->logo = $logo;
            $this->logoRight = $logoRight;
            $this->comingFrom = $comingFrom;
            $this->schemeType = $schemeType;
        }

        //Page header
        public function Header() {
            if($this->schemeType != 'tb') {
                $logoFolderPath = UPLOAD_PATH . DIRECTORY_SEPARATOR . 'logo' . DIRECTORY_SEPARATOR;
                if (trim($this->logo) != "") {
                    if (file_exists($logoFolderPath . $this->logo)) {
                        $image_file = $logoFolderPath . $this->logo;
                        $this->Image($image_file, 10, 10, 25, '', 'JPG', '', 'T', false, 300, '', false, false, 0, false, false, false);
                    }
                }
                if (trim($this->logoRight) != "") {
                    if (file_exists($logoFolderPath . $this->logoRight)) {
                        $image_file = $logoFolderPath . $this->logoRight;
                        $this->Image($image_file, 180, 10, 20, '', 'JPG', '', 'T', false, 300, '', false, false, 0, false, false, false);
                    }
                }
            }

            // Set font
            $this->SetFont('Helvetica', '', 8);

            if($this->schemeType != 'tb') {
                $this->header = str_replace("<div", "<span", trim($this->header));
                $this->header = str_replace("</div>", "</span><br/>", $this->header);
            }

            $html = $this->header;

            if($this->schemeType != 'tb') {
                $this->writeHTMLCell(0, 0, 25, 10, $html, 0, 0, 0, true, 'C', true);
            }
            if ($this->schemeType == 'vl') {
                $html='<p style="font-weight: bold;text-align:center;">Proficiency Testing Program for HIV Viral load using Dried Tube Specimen<br><strong>All participants results summary report</strong></p>';
            } else if ($this->schemeType == 'eid') {
                $html='<h3 style="font-weight: bold;text-align:center;">HIV-1 Proficiency Testing Program for Early Infant Diagnosis using Dried Blood Spot</h3>';
            } else if($this->schemeType == 'tb') {
                $html = '<h3 style="background-color:#000000;color:#ffffff;font-weight: bold;text-align:center;">';
                $html .= '<br />XPERT MTB ASSAY PROFICIENCY TEST PROGRAM PARTICIPANTâ€™S RESULTS SUMMARY<br /></h3>';
            } else {
                $html='<h3 style="font-weight: bold;text-align:center;">Proficiency Testing Program for Anti-HIV Antibodies Diagnostics using '.$this->scheme_name.'</h3>';
            }

            if($this->schemeType != 'tb') {
                $this->writeHTMLCell(0, 0, 30, 30, $html, 0, 0, 0, true, 'J', true);
                $html = '<hr/>';
                $this->writeHTMLCell(0, 0, 10, 45, $html, 0, 0, 0, true, 'J', true);
            } else {
                $this->writeHTMLCell(0, 10, 15, 20, $html, 0, 0, 0, true, 'J', true);
            }
        }

        // Page footer
        public function Footer() {
            $finalizeReport="";
            if (trim($this->comingFrom)=="finalize") {
               $finalizeReport=' -FINALIZED';
            }
            // Position at 15 mm from bottom
            $this->SetY(-15);
            // Set font
            $this->SetFont('Helvetica', 'I', 8);
            // Page number
            $this->Cell(0, 10, 'Page ' . $this->getAliasNumPage() . '/' . $this->getAliasNbPages()." - Report generated at :".date("d-M-Y H:i:s").$finalizeReport, 0, false, 'C', 0, '', 0, false, 'T', 'M');
        }
    }

    // create new PDF document
    $pdf = new MYPDF(PDF_PAGE_ORIENTATION, PDF_UNIT, PDF_PAGE_FORMAT, true, 'UTF-8', false);

    // set default header data
    $pdf->SetHeaderData(PDF_HEADER_LOGO, PDF_HEADER_LOGO_WIDTH, PDF_HEADER_TITLE, PDF_HEADER_STRING);

    // set header and footer fonts
    $pdf->setHeaderFont(Array(PDF_FONT_NAME_MAIN, '', PDF_FONT_SIZE_MAIN));
    $pdf->setFooterFont(Array(PDF_FONT_NAME_DATA, '', PDF_FONT_SIZE_DATA));

    // set default monospaced font
    $pdf->SetDefaultMonospacedFont(PDF_FONT_MONOSPACED);

    // set margins
    if ($this->result['shipment']['scheme_type'] == 'tb') {
        $pdf->SetMargins(PDF_MARGIN_LEFT, 35, PDF_MARGIN_RIGHT);
        $pdf->SetHeaderMargin(1);
        $pdf->SetFooterMargin(1);
    } else {
        $pdf->SetMargins(PDF_MARGIN_LEFT, 50, PDF_MARGIN_RIGHT);
        $pdf->SetHeaderMargin(PDF_MARGIN_HEADER);
        $pdf->SetFooterMargin(PDF_MARGIN_FOOTER);
    }
    // set auto page breaks
    $pdf->SetAutoPageBreak(TRUE, PDF_MARGIN_BOTTOM);
    // set image scale factor
    $pdf->setImageScale(PDF_IMAGE_SCALE_RATIO);
    // set some language-dependent strings (optional)
    if (@file_exists(dirname(__FILE__) . '/lang/eng.php')) {
        require_once(dirname(__FILE__) . '/lang/eng.php');
        $pdf->setLanguageArray($l);
    }

    $pdf->setSchemeName($this->header, $this->result['shipment']['scheme_name'], $this->logo,$this->logoRight,$this->comingFrom,$this->result['shipment']['scheme_type']);
    // add a page

    // ---------------------------------------------------------
    if ($this->result['shipment']['scheme_type'] == 'eid') {
        $pdf->AddPage('P', 'A4');
        $participantCount = '';
        if (isset($this->result['shipment']['participant_count'])) {
            $participantCount = $this->result['shipment']['participant_count'];
        }
        if (isset($this->result['shipment']['summaryResult']) && sizeof($this->result['shipment']['summaryResult']) > 0) {
            foreach ($this->result['shipment']['summaryResult'] as $result) {
                $overAllMaxScore = 0;
                $overAllBelowScore = 0;
                $partCount = count($result);
                for ($i = 0; $i < $partCount; $i++) {
                    if ($this->result['shipment']['max_score'] == $result[$i]['shipment_score']) {
                        $overAllMaxScore++;
                    } else {
                        $overAllBelowScore++;
                    }
                }
            }
            $scoringPer = round(($overAllMaxScore / $partCount) * 100, 2);
            // set font
            $pdf->SetFont('times', 'B', 12);
            $overAllSumRes = '<h3>Summary of All Laboratory Scores*</h3>';
            $overAllSumRes .= '<table border="1">';
            $overAllSumRes .= '<tr style="background-color:#dbe4ee;">';
            $overAllSumRes .= '<td style="text-align:center;">Total number of participating laboratories</td>';
            $overAllSumRes .= '<td style="text-align:center;">Total number of participants responded</td>';
            $overAllSumRes .= '<td style="text-align:center;">Total number of participants scoring "'.$this->result['shipment']['max_score'].'"</td>';
            $overAllSumRes .= '<td style="text-align:center;">Total number of participants scoring below "'.$this->result['shipment']['max_score'].'"</td>';
            $overAllSumRes .= '<td style="text-align:center;">Percentage of participants scoring "' . $this->result['shipment']['max_score'] . '"</td>';
            $overAllSumRes .= '</tr>';

            $overAllSumRes .= '<tr>';
            $overAllSumRes .= '<td style="text-align:center;">' . $participantCount . '</td>';
            $overAllSumRes .= '<td style="text-align:center;">' . $partCount . '</td>';
            $overAllSumRes .= '<td style="text-align:center;">' . $overAllMaxScore . '</td>';
            $overAllSumRes .= '<td style="text-align:center;">' . $overAllBelowScore . '</td>';
            $overAllSumRes .= '<td style="text-align:center;">' . $scoringPer . '%</td>';
            $overAllSumRes .= '</tr>';

            $overAllSumRes .= '</table>';

            $pdf->writeHTML($overAllSumRes, true, false, true, false, '');

            $n = count($this->result['shipment']['correctRes']);
            if ($n > 0) {
                $overAllCorrectRes = '<h3>Percentage of laboratories reporting correctly*</h3>';
                $overAllCorrectRes .= '<table border="1">';
                $overAllCorrectRes .= '<tr style="background-color:#dbe4ee;">';
                $overAllCorrectRes .= '<td style="text-align:center;font-weight:bold;" colspan="'.($n+2).'">Sample Id</td>';
                $overAllCorrectRes .= '</tr>';

                $overAllCorrectRes .= '<tr style="background-color:#dbe4ee;">';
                $overAllCorrectRes .= '<td></td>';
                foreach ($this->result['shipment']['correctRes'] as $cKey=>$cVal) {
                    $overAllCorrectRes .= '<td style="text-align:center;">'.$cKey.'</td>';
                }
                $overAllCorrectRes .= '<td style="text-align:center;">Average</td>';
                $overAllCorrectRes .= '</tr>';

                $avg = '';
                $overAllCorrectRes .= '<tr>';
                $overAllCorrectRes .= '<td style="text-align:center;">Correctly Reported</td>';
                foreach ($this->result['shipment']['correctRes'] as $cKey=>$cVal) {
                    $avg += round(($cVal / $partCount) * 100,2);
                    $overAllCorrectRes .= '<td style="text-align:center;">'.round(($cVal/ $partCount) * 100,2).'%</td>';
                }
                $overAllCorrectRes .= '<td style="text-align:center;">'.round(($avg/$n),2).'%</td>';
                $overAllCorrectRes .= '</tr>';
                $overAllCorrectRes .= '</table>';
                $overAllCorrectRes .= '* Includes In-house and Other assays<br>';

                $pdf->writeHTML($overAllCorrectRes, true, false, true, false, '');
            }

            $k = count($this->result['shipment']['avgAssayResult']);

            $avgAssay = "";
            if ($k > 0) {
                foreach ($this->result['shipment']['avgAssayResult'] as $assayResult) {
                    $avgAssay = '';
                    $avgAssay .= '<div style="border: 2px solid #000000;padding:5px;">';
                    $avgAssay .= '<span>Summary of All Laboratories using '.$assayResult['vlAssay'].'</span><br/>';
                    $avgAssay .= '<table border="1">';
                    $avgAssay .= '<tr style="background-color:#dbe4ee;">';
                    $avgAssay .= '<td style="text-align:center;">Total Number of Laboratories Performing Assay Pair</td>';
                    $avgAssay .= '<td style="text-align:center;">Total Number of Laboratories Scoring "'.$this->result['shipment']['max_score'].'"</td>';
                    $avgAssay .= '<td style="text-align:center;">Total Number of Laboratories Scoring Below "'.$this->result['shipment']['max_score'].'"</td>';
                    $avgAssay .= '<td style="text-align:center;">Percentage of Laboratories Scoring "'.$this->result['shipment']['max_score'].'"</td>';
                    $avgAssay .= '</tr>';
                    $avgAssay .= '<tr>';
                    $avgAssay .= '<td style="text-align:center;">'.$assayResult['participantCount'].'</td>';
                    $avgAssay .= '<td style="text-align:center;">';
                    $assayResult['maxScore'] = (isset($assayResult['maxScore']) ? $assayResult['maxScore'] : "0");
                    $avgAssay .= $assayResult['maxScore'];
                    $avgAssay .= '</td>';
                    $avgAssay .= '<td style="text-align:center;">';
                    $assayResult['belowScore'] = (isset($assayResult['belowScore']) ? $assayResult['belowScore'] : "0");
                    $avgAssay .= $assayResult['belowScore'];
                    $avgAssay .= '</td>';
                    $avgAssay .= '<td style="text-align:center;">';
                    $avgAssay .= round(($assayResult['maxScore'] / $assayResult['participantCount']) * 100, 2)."%";
                    $avgAssay .= '</td>';
                    $avgAssay .= '</tr>';
                    $avgAssay .= '</table>';

                    $m = count($assayResult['specimen']);
                    $avgAssay .= '<br/><br/><table border="1" style="">';
                    $avgAssay .= '<tr style="background-color:#dbe4ee;">';
                    $avgAssay .= '<td style="text-align:center;" colspan="'.($m+2).'">Sample ID</td>';
                    $avgAssay .= '</tr>';

                    $avgAssay .= '<tr style="background-color:#dbe4ee;">';
                    $avgAssay .= '<td></td>';
                    foreach ($assayResult['specimen'] as $sKey=>$sample) {
                        $avgAssay .= '<td style="text-align:center;">'.$sKey.'</td>';
                    }
                    $avgAssay .= '<td style="text-align:center;">Average</td>';
                    $avgAssay .= '</tr>';
                    $sampleAvg = '';
                    $sCount = count($assayResult['specimen']);
                    $avgAssay .= '<tr>';
                    $avgAssay .= '<td rowspan="2" style="text-align:center;background-color:#dbe4ee;">Correctly Reported</td>';
                    foreach ($assayResult['specimen'] as $sKey=>$sample) {
                        $sampleAvg += $sample['correctRes'];
                        $avgAssay .= '<td style="text-align:center;">'.$sample['correctRes'].'</td>';
                    }
                    $avg = round(($sampleAvg/$sCount),2);
                    $avgAssay .= '<td style="text-align:center;">'.$avg.'</td>';
                    $avgAssay .= '</tr>';

                    $sampleAvgInPer = '';
                    $avgAssay .= '<tr>';
                    foreach ($assayResult['specimen'] as $sKey=>$sample) {
                        $sampleAvgInPer += $sample['correctRes'];
                        $avgAssay .= '<td style="text-align:center;">'.round(($sample['correctRes']/$assayResult['participantCount'])*100,2).'%</td>';
                    }
                    $avgAssay .= '<td style="text-align:center;">'.round(($avg/$assayResult['participantCount'])*100,2).'%</td>';
                    $avgAssay .= '</tr>';
                    $avgAssay .= '</table>';

                    $avgAssay .= '</div><br/>';
                    $pdf->writeHTML($avgAssay, true, false, true, false, '');
                    if ($pdf->getY()>=250) {
                        $pdf->AddPage();
                    }
                }
            }
        }
    } else if ($this->result['shipment']['scheme_type'] == 'vl') {
        $pdf->AddPage('P', 'A4');
        $pdf->SetFont('times', 'B', 12);
        $referenceRes = '<table style="text-align:center;width:100%" align="left">';
        $referenceRes .= '<tr>';
        $referenceRes .= '<td style="font-weight:bold;width:20%;">PT Panel</td><td style="font-weight:normal;width:30%;">' . $this->result['shipment']['distribution_code'] . '<br>(' . $this->dateFormat($this->result['shipment']['shipment_date']) . ')</td>';
        $referenceRes .= '<td style="font-weight:bold;width:20%;">Shipment Code</td><td style="font-weight:normal;width:30%;">' . $this->result['shipment']['shipment_code'] . '</td>';
        $referenceRes .= '</tr>';
        $referenceRes .= '</table>';
        $pdf->writeHTML($referenceRes, true, false, true, false, '');

        if(count($this->result['vlCalculation']) > 0){
			foreach ($this->result['vlCalculation'] as $vlCal) {
				$calRes = '<h5> Summary of '.$vlCal['vlAssay'].' Results | No. of Labs : '.$vlCal['participant-count'][$vlCal[0]['sample_label']].' </h5>';
				$calRes .= '<table border="1" style="text-align:center;font-weight:bold;width:650px;font-size:13px;">
				<tr>
					<td style="background-color:#dbe4ee;text-align:center;">Platform </td>
					<td style="background-color:#dbe4ee;text-align:center;">Specimen ID </td>
					<td style="background-color:#dbe4ee;text-align:center;">Mean<br/>(log<sub>10</sub> copies/ml)</td>
					<td style="background-color:#dbe4ee;text-align:center;">S.D.</td>
					<td style="background-color:#dbe4ee;text-align:center;">Lowest Acceptable Limit</td>
					<td style="background-color:#dbe4ee;text-align:center;">Highest Acceptable Limit</td>
					<td style="background-color:#dbe4ee;text-align:center;">CV</td>
				</tr>';

				$countCal = count($vlCal)-1;
				for ($c = 0; $c < $countCal; $c++) {
					if (isset($vlCal[$c]['mean'])) {
					    $calRes .= '<tr>';
					    if  ($c == 0) {
					        if ($vlCal[$c]['vl_assay'] == 6) {
					            $calRes .= '<td style="text-align:center;" rowspan="'.$countCal.'">'.$vlCal['shortName'].'<br/>('.implode(",",$vlCal['otherAssayName']).')</td>';
					        } else {
					            $calRes .= '<td style="text-align:center;" rowspan="'.$countCal.'">'.$vlCal['shortName'].'</td>';
					        }
					    }
                      $calRes .= '<td>'.$vlCal[$c]['sample_label'].'</td>
						            <td>'.number_format(round($vlCal[$c]['mean'], 2), 2, '.', '').'</td>
						            <td>'.number_format(round($vlCal[$c]['sd'], 2), 2, '.', '').'</td>
						            <td>'.number_format(round($vlCal[$c]['low_limit'], 2), 2, '.', '').'</td>
						            <td>'.number_format(round($vlCal[$c]['high_limit'], 2), 2, '.', '').'</td>
						            <td>'.number_format(round($vlCal[$c]['cv'], 2), 2, '.', '').'</td>
					            </tr>';
					}
				}
				$calRes .= '</table>';

				$pdf->writeHTML($calRes, true, false, true, false, '');
			}
		}
		$uncalculatedAssayList = null;

		if (count($this->result['pendingAssay']) > 0) {
		    foreach ($this->result['pendingAssay'] as $vlId=>$vlCal) {
		        if ($pdf->getY() >= 250) {
		            $pdf->AddPage();
		        }
				$calRes = '<h5> Summary of '.$vlCal['vlAssay'].' Results</h5>';
				$calRes .= '<table border="1" style="text-align:center;font-weight:bold;width:650px;font-size:13px;">
                              <tr>
                                  <td style="background-color:#dbe4ee;text-align:center;">Platform </td>
                                  <td style="background-color:#dbe4ee;text-align:center;">No. of Labs</td>
                              </tr>';
				$n = count($vlCal['specimen']);
				$l = 0;
				foreach ($vlCal['specimen'] as $key=>$val) {
					$calRes.='<tr>';
					if ($l == 0) {
					    if ($vlId == 6) {
					        $calRes .= '<td style="text-align:center;">'.implode(",",$vlCal['otherAssayName']).'</td>';
                          $uncalculatedAssayList[] = "Other";
					    } else {
					        $calRes .= '<td style="text-align:center;">'.$vlCal['shortName'].'</td>';
                          $uncalculatedAssayList[] = $vlCal['vlAssay'];
					    }
					}
					$calRes .= '<td>'.count($val).'</td>';
					$calRes .= '</tr>';
					break; // JUST ONE ROW IS ENOUGH
              }
                $calRes .= '</table>';
			    $pdf->writeHTML($calRes, true, false, true, false, '');
			}
            $uncalculatedAssayList = array_unique($uncalculatedAssayList);
            $uncalculatedAssays = implode(", ",$uncalculatedAssayList);
            $unCalRes='<h5>'.$uncalculatedAssays.' Platforms were not analyzed or graded.</h5>';

            $pdf->writeHTML($unCalRes, true, false, true, false, '');
		}
        $footerHead='<br/><h5>0.00 = Target Not Detected or less than lower limit of detection</h5>';
        $pdf->writeHTML($footerHead, true, false, true, false, '');
    }  else if ($this->result['shipment']['scheme_type'] == 'tb') {
        $pdf->AddPage('P', 'A4');
        $pdf->SetFont('Helvetica', 'B', 11);
        $labInfo = '<h3 style="width:100%;text-align:center;">'.$this->result['shipment']['shipment_code'].'</h3>';
        $labInfo .= '<p style="font-size:10pt;width:100%;text-align:center;">International Laboratory Branch, Division of Global HIV and TB, Centers for Disease Control and Prevention</p>';
        $labInfo .= '<table cellpadding="2" style="width:100%;font-size:8pt;">';
        $labInfo .= '    <tr>';
        $labInfo .= '	     <td style="width:10%;"></td>';
        $labInfo .= '	     <td style="border-top:solid 10px #000000;border-bottom:solid 10px #000000;background-color:#777777;color:#ffffff;text-align:center;width:20%;"><strong>Country</strong></td>';
        $labInfo .= '	     <td style="border-top:solid 10px #000000;border-bottom:solid 10px #000000;background-color:#777777;color:#ffffff;text-align:center;width:40%;"><strong>Testing Site</strong></td>';
        $labInfo .= '	     <td style="border-top:solid 10px #000000;border-bottom:solid 10px #000000;background-color:#777777;color:#ffffff;text-align:center;width:20%;"><strong>PT-ID Number</strong></td>';
        $labInfo .= '	     <td style="width:10%;"></td>';
        $labInfo .= '    </tr>';
        foreach ($this->result['tbReportParticipants'] as $tbReportParticipant) {
            $labInfo .= '    <tr>';
            $labInfo .= '	     <td></td>';
            $labInfo .= '	     <td style="text-align:center;border-bottom:solid 10px #000000;">'.$tbReportParticipant['country_name'].'</td>';
            $labInfo .= '	     <td style="text-align:center;border-bottom:solid 10px #000000;">'.$tbReportParticipant['lab_name'];
            if ($tbReportParticipant['is_excluded'] == 'yes') {
                $labInfo .= ' <span style="color:#ff0000;">(Excluded)</span>';
            }
            $labInfo .= '</td>';
            $labInfo .= '	     <td style="text-align:center;border-bottom:solid 10px #000000;">'.$tbReportParticipant['unique_identifier'].'</td>';
            $labInfo .= '	     <td></td>';
            $labInfo .= '    </tr>';
        }
        $labInfo .= '</table><br /><br />';
        $labInfo .= '<table cellpadding="3" style="width:100%;font-size:8pt;">';
        $labInfo .= '    <tr style="background-color:#777777;color:#ffffff;">';
        $labInfo .= '	     <td style="text-align:center;border-top:solid 10px #000000;border-bottom:solid 10px #000000;" colspan="'.(count($this->result['tbReportSummary']) + 1).'"><strong>Summary of All Reporting Sites</strong></td>';
        $labInfo .= '    </tr>';
        $labInfo .= '    <tr>';
        $labInfo .= '	     <td style="width:40%;"></td>';
        foreach ($this->result['tbReportSummary'] as $sampleSummary) {
            $labInfo .= '	     <td style="width:'.(60 / count($this->result['tbReportSummary'])).'%;text-align:center;"><strong>'.$sampleSummary['sample_label'].'</strong>';
            if ($sampleSummary['ref_is_excluded'] == 'yes') {
                if ($sampleSummary['ref_is_exempt'] == 'yes') {
                    $labInfo .= '<br /><span style="color:#ffa500;">(Exempt)</span>';
                } else {
                    $labInfo .= '<br /><span style="color:#ff0000;">(Excluded)</span>';
                }
            }
            $labInfo .= '</td>';
        }
        $labInfo .= '    </tr>';
        $labInfo .= '    <tr>';
        $labInfo .= '	     <td style="width:40%;">Total number of reporting sites</td>';
        foreach ($this->result['tbReportSummary'] as $sampleSummary) {
            $labInfo .= '	     <td style="width:'.(60 / count($this->result['tbReportSummary'])).'%;text-align:center;">'.$sampleSummary['no_of_responses'].'</td>';
        }
        $labInfo .= '    </tr>';
        $labInfo .= '    <tr>';
        $labInfo .= '	     <td style="background-color:#cccccc;width:100%;" colspan="'.(count($this->result['tbReportSummary']) + 1).'"><strong>TB Detection</strong></td>';
        $labInfo .= '    </tr>';
        $labInfo .= '    <tr>';
        $labInfo .= '	     <td style="width:40%;">Sites detecting TB (%)</td>';
        foreach ($this->result['tbReportSummary'] as $sampleSummary) {
            $labInfo .= '	     <td style="width:'.(60 / count($this->result['tbReportSummary'])).'%;text-align:center;">'.$sampleSummary['mtb_detected'].' ('.round(($sampleSummary['mtb_detected'] / $sampleSummary['no_of_responses']) * 100, 1).'%)</td>';
        }
        $labInfo .= '    </tr>';
        $labInfo .= '    <tr>';
        $labInfo .= '	     <td style="width:40%;">Sites not detecting TB (%)</td>';
        foreach ($this->result['tbReportSummary'] as $sampleSummary) {
            $labInfo .= '	     <td style="width:'.(60 / count($this->result['tbReportSummary'])).'%;text-align:center;">'.$sampleSummary['mtb_not_detected'].' ('.round(($sampleSummary['mtb_not_detected'] / $sampleSummary['no_of_responses']) * 100, 1).'%)</td>';
        }
        $labInfo .= '    </tr>';
        $labInfo .= '    <tr>';
        $labInfo .= '	     <td style="width:40%;">Sites reporting uninterpretable TB result*(%)</td>';
        foreach ($this->result['tbReportSummary'] as $sampleSummary) {
            $labInfo .= '	     <td style="width:'.(60 / count($this->result['tbReportSummary'])).'%;text-align:center;">'.$sampleSummary['mtb_uninterpretable'].' ('.round(($sampleSummary['mtb_uninterpretable'] / $sampleSummary['no_of_responses']) * 100, 1).'%)</td>';
        }
        $labInfo .= '    </tr>';
        $labInfo .= '    <tr>';
        $labInfo .= '	     <td style="background-color:#cccccc;width:100%;" colspan="'.(count($this->result['tbReportSummary']) + 1).'"><strong>RIF Detection</strong></td>';
        $labInfo .= '    </tr>';
        $labInfo .= '    <tr>';
        $labInfo .= '	     <td style="width:40%;">Sites detecting Rif resistance (%)</td>';
        foreach ($this->result['tbReportSummary'] as $sampleSummary) {
            $labInfo .= '	     <td style="width:'.(60 / count($this->result['tbReportSummary'])).'%;text-align:center;">'.$sampleSummary['rif_detected'].' ('.round(($sampleSummary['rif_detected'] / $sampleSummary['no_of_responses']) * 100, 1).'%)</td>';
        }
        $labInfo .= '    </tr>';
        $labInfo .= '    <tr>';
        $labInfo .= '	     <td style="width:40%;">Sites not detecting Rif resistance (%)</td>';
        foreach ($this->result['tbReportSummary'] as $sampleSummary) {
            $labInfo .= '	     <td style="width:'.(60 / count($this->result['tbReportSummary'])).'%;text-align:center;">'.$sampleSummary['rif_not_detected'].' ('.round(($sampleSummary['rif_not_detected'] / $sampleSummary['no_of_responses']) * 100, 1).'%)</td>';
        }
        $labInfo .= '    </tr>';
        $labInfo .= '    <tr>';
        $labInfo .= '	     <td style="width:40%;">Sites reporting indeterminate Rif result (%)</td>';
        foreach ($this->result['tbReportSummary'] as $sampleSummary) {
            $labInfo .= '	     <td style="width:'.(60 / count($this->result['tbReportSummary'])).'%;text-align:center;">'.$sampleSummary['rif_indeterminate'].' ('.round(($sampleSummary['rif_indeterminate'] / $sampleSummary['no_of_responses']) * 100, 1).'%)</td>';
        }
        $labInfo .= '    </tr>';
        $labInfo .= '    <tr>';
        $labInfo .= '	     <td style="width:40%;">Sites reporting uninterpretable Rif result*(%)</td>';
        foreach ($this->result['tbReportSummary'] as $sampleSummary) {
            $labInfo .= '	     <td style="width:'.(60 / count($this->result['tbReportSummary'])).'%;text-align:center;">'.$sampleSummary['rif_uninterpretable'].' ('.round(($sampleSummary['rif_uninterpretable'] / $sampleSummary['no_of_responses']) * 100, 1).'%)</td>';
        }
        $labInfo .= '    </tr>';
        $labInfo .= '    <tr>';
        $labInfo .= '	     <td style="width:100%;" colspan="'.(count($this->result['tbReportSummary']) + 1).'">* Uninterpretable result = invalid, error, or no result</td>';
        $labInfo .= '    </tr>';
        $labInfo .= '</table><br />';
        $pdf->writeHTML($labInfo, true, false, true, false, '');
    } else {
        $pdf->AddPage('P', 'A4');
        $pdf->SetFont('times', 'B', 12);
        if (isset($this->result['shipment']['referenceResult']) &&
            count($this->result['shipment']['referenceResult']) > 0) {
            $referenceRes = '<table style="text-align:center;width:100%" align="left">';
            $referenceRes .= '    <tr>';
            $referenceRes .= '        <td style="font-weight:bold;width:20%;">PE Survey</td><td style="font-weight:normal;width:30%;">' . $this->result['shipment']['distribution_code'] . '<br>(' . $this->dateFormat($this->result['shipment']['shipment_date']) . ')</td>';
            $referenceRes .= '        <td style="font-weight:bold;width:20%;">Shipment Code</td><td style="font-weight:normal;width:30%;">' . $this->result['shipment']['shipment_code'] . '</td>';
            $referenceRes .= '    </tr>';
            $referenceRes .= '</table>';

            $pdf->writeHTML($referenceRes, true, false, true, false, '');
        }
        if (isset($this->result['shipment']['summaryResult']) &&
            count($this->result['shipment']['summaryResult']) > 0) {
            $labCounter = 1;
            $pass = $config->evaluation->dts->passPercentage;
            $barPoints["0 - 59"] = 0;
            $barPoints["60 - 69"] = 0;
            $barPoints["70 - $pass"] = 0;
            $abovePass = sprintf("above $pass");
            $barPoints[$abovePass] = 0;
            foreach ($this->result['shipment']['summaryResult'] as $result) {
                $maxScore = 0;
                $belowScore = 0;
                $partCount = count($result) - 1;
                for ($i = 0; $i < $partCount; $i++) {
                    if ($result[$i]['is_excluded']=='yes') {
                        continue;
                    }
                    $totalScore = $result[$i]['shipment_score'] + $result[$i]['documentation_score'];
                    if ($totalScore > 0 && $totalScore < 60) {
                        $barPoints["0 - 59"]++;
                    } else if ($totalScore > 59 && $totalScore < 70) {
                        $barPoints["60 - 69"]++;
                    } else if ($totalScore > 69 && $totalScore <= $pass) {
                        $barPoints["70 - $pass"]++;
                    } else if ($totalScore > $config->evaluation->dts->passPercentage) {
                        $barPoints[$abovePass]++;
                    }
                    if (($totalScore) >= $config->evaluation->dts->passPercentage) {
                        $maxScore++;
                    } else {
                        $belowScore++;
                    }
                    $labCounter++;
                }

                $scoringPer = round(($maxScore / $partCount) * 100, 2);
            }
            $dataSet = new XYSeriesDataSet();
            $chart->getPlot()->getPalette()->setBarColor(array(
                new Color(128,0,0),
                new Color(255,0,0),
                new Color(255,255,0),
                new Color(0,128,0)
            ));
            foreach ($barPoints as $key=>$val) {
                $serie = new XYDataSet();
                $serie->addPoint(new Point("", $val));
                $dataSet->addSerie($key, $serie);
            }
            $chart->setDataSet($dataSet);

            $chart->getPlot()->setGraphCaptionRatio(0.5);
            $chart->setTitle("Comparison of test performance between participating laboratories");
            $chart->render(UPLOAD_PATH . DIRECTORY_SEPARATOR . 'reports' . DIRECTORY_SEPARATOR . $fileSafeShipmentCode . DIRECTORY_SEPARATOR . "bar_chart.png");

            // set font
            $pdf->SetFont('times', 'B', 12);

            $overview = '<table border="1" style="font-size:13px;"><tr>';
            $overview .= '<td style="background-color:#dbe4ee;text-align:center;"># of Responses </td>';
            $overview .= '<td style="background-color:#dbe4ee;text-align:center;"># of Participants Scoring >= "' . $config->evaluation->dts->passPercentage . '"</td>';
            $overview .= '<td style="background-color:#dbe4ee;text-align:center;"># of Participants Scoring < "' . $config->evaluation->dts->passPercentage . '" </td>';
            $overview .= '</tr>';
            $overview .= '<tr>';
            $overview .= '<td style="text-align:center;">' . $partCount . '</td>';
            $overview .= '<td style="text-align:center;">' . $maxScore .' ('.round(($maxScore/$partCount)*100,2). '%)</td>';
            $overview .= '<td style="text-align:center;">' . $belowScore .' ('.round(($belowScore/$partCount)*100,2). '%)</td>';
            $overview .= '</tr>';
            $overview .= '</table><br/>';
            $pdf->writeHTML($overview, true, false, true, false, '');

            $sampleCount = count($result['correctCount']);
            $sampleCode = '<table border="1" style="font-size:13px;">';
            $sampleCode .= '<tr>';
            $sampleCode .= '<td rowspan="2"></td>';
            $sampleCode .= '<td colspan="' . $sampleCount . '" style="background-color:#dbe4ee;text-align:center;">Sample ID</td>';
            $sampleCode .= '<td></td>';
            $sampleCode .= '</tr>';
            $sampleCode .= '<tr>';
            foreach ($result['correctCount'] as $sample) {
                $sampleCode.='<td style="background-color:#dbe4ee;text-align:center;">' . $sample['sample_label'] . '</td>';
            }
            $sampleCode .= '<td style="background-color:#dbe4ee;text-align:center;">Average</td>';
            $sampleCode .= '</tr>';
            $sampleCode .= '<tr>';
            $sampleCode .= '<td style="background-color:#dbe4ee;text-align:center;">Expected Result</td>';
            $nonMandatorySamples = array();
            foreach ($this->result['shipment']['referenceResult'] as $refRes) {
                if ($refRes['mandatory'] == 0) {
                    $nonMandatorySamples[] = $refRes['sample_label'];
                }
                $sampleCode.='<td style="text-align:center;">' . ucfirst(strtolower($refRes['referenceResult'])) . '</td>';
            }
            $sampleCode .= '<td></td>';
            $sampleCode .= '</tr>';
            $sampleCode .= '<tr>';
            $sampAvg = '0';
            $sampPerAvg = '0';
            $sampleCode .= '<td style="background-color:#dbe4ee;text-align:center;">Correctly Reported</td>';

            foreach ($result['correctCount'] as $sample) {
                $sampAvg += $sample["correctRes"];
                $sampPerAvg += (($sample["correctRes"] / $partCount) * 100);
                $sampleCode .= '<td style="text-align:center;font-weight:normal;">' . $sample["correctRes"] .' ('. round(($sample["correctRes"] / $partCount) * 100, 2) . '%)</td>';
            }
            $sampleCode .= '<td style="text-align:center;font-weight:normal;">' . round(($sampAvg / $sampleCount), 2).' ('.round(($sampPerAvg / $sampleCount), 2) .'%)</td>';
            $sampleCode .= '</tr>';

            $sampleCode .= '</table></br>';
            $pdf->writeHTML($sampleCode, true, false, true, false, '');

            if (count($nonMandatorySamples) > 0) {
                $nmsTable = '<span style="font-size:13px;">';
                $nmsTable .= "The following samples have been excluded from this evaluation : ".implode(", ",$nonMandatorySamples);
                $nmsTable .= "</span><br/>";
                $pdf->writeHTML($nmsTable, true, false, true, false, '');
            }

            //----------------Participant Performance Overview  start----------------
            $ppOverview = '<span style="font-size:13px;">Participant Performance Overview</span><br/>';
            $ppOverview .= '<table border="1"  style="font-size:13px;"><tr>';
            $ppOverview .= '<td style="background-color:#dbe4ee;text-align:center;"># of Participants</td>';
            $ppOverview .= '<td style="background-color:#dbe4ee;text-align:center;"># of Responses</td>';
            $ppOverview .= '<td style="background-color:#dbe4ee;text-align:center;"># of Valid Responses</td>';
            $ppOverview .= '<td style="background-color:#dbe4ee;text-align:center;">Average Score</td></tr>';

            $ppOverview .= '<tr>';
            $ppOverview .= '<td style="text-align:center;">' . $this->participantPerformance['total_shipped'] . '</td>';
            $ppOverview .= '<td style="text-align:center;">' . $this->participantPerformance['total_responses'] . '</td>';
            $ppOverview .= '<td style="text-align:center;">' . $this->participantPerformance['valid_responses'] . '</td>';
            $ppOverview .= '<td style="text-align:center;">' . round($this->participantPerformance['average_score'], 2) . '</td>';
            $ppOverview .= '</tr>';
            $ppOverview .= '</table><br>';
            //----------------Participant Performance Overview  Ends----------------

            $pdf->writeHTML($ppOverview, true, false, true, false, '');

            if (count($this->correctiveness) > 0) {
                //----------------Participant Corrective Action Overview  start----------------
                $correctiveActionStuff = '<span style="font-size:13px;">Corrective Action Overview </span><br/>
                <table border="1" style="font-weight:normal;font-size:13px;"><tr style="font-weight:bold;">';
                $correctiveActionStuff .= '<td style="background-color:#dbe4ee;text-align:center;width:75%;">Corrective Action</td>';
                $correctiveActionStuff .= '<td style="background-color:#dbe4ee;text-align:center;width:25%;">Responses having Corrective Action</td>';

                $correctiveActionStuff.='</tr>';
                foreach ($this->correctiveness as $correctiveness) {
                    $correctiveActionStuff .= '<tr>';
                    $correctiveActionStuff .= '<td style="text-align:left;">' . $correctiveness['corrective_action'] . '</td>';
                    $correctiveActionStuff .= '<td style="text-align:center;">' . $correctiveness['total_corrective'] . '</td>';

                    $correctiveActionStuff .= '</tr>';
                }
                $correctiveActionStuff.='</table><br/>';

                //----------------Participant Corrective Action Overview  Ends----------------
                $pdf->writeHTML($correctiveActionStuff, true, false, true, false, '');
            }
            $image_file = UPLOAD_PATH . DIRECTORY_SEPARATOR . 'reports' . DIRECTORY_SEPARATOR . $fileSafeShipmentCode . DIRECTORY_SEPARATOR . 'bar_chart.png';
            $y = $pdf->getY() + 5;
            $pdf->Image($image_file, 5, $pdf->getY(), '', '', '', '', '', false, 300);
            if (file_exists($image_file)) {
                unlink($image_file);
            }
        }
        if ($this->result['shipment']['scheme_type'] == 'dts') {
            if (count($this->result['shipment']['pieChart']) > 0) {
                $chart = new PieChart(700, 400);
                $dataSet = new XYDataSet();
                foreach ($this->result['shipment']['pieChart'] as $piechart) {
                    $dataSet->addPoint(new Point($piechart['kit_name']." (N=".$piechart['count'].")", $piechart['count']));
                }
                $piechart = UPLOAD_PATH . DIRECTORY_SEPARATOR . 'reports' . DIRECTORY_SEPARATOR . $fileSafeShipmentCode . DIRECTORY_SEPARATOR . 'pieChart.png';
                $chart->setDataSet($dataSet);
                $chart->getPlot()->setGraphCaptionRatio(0.5);
                $chart->setTitle("Test kits used for DTS-based PE survey " . $this->result['shipment']['distribution_code']);
                $chart->render($piechart);

                $pdf->Image($piechart, 5, $y, '', '', '', '', '', false, 300);
                if (file_exists($piechart)) {
                    unlink($piechart);
                }
            }
        }
        if ($this->result['shipment']['scheme_type'] == 'dbs') {
            $chart = new PieChart(700, 400);
            $dataSet = new XYDataSet();
            if (trim($this->result['shipment']['dbsPieChart']['EIA/EIA/EIA/WB']) != "") {
                $dataSet->addPoint(new Point("EIA/EIA/EIA/WB", $this->result['shipment']['dbsPieChart']['EIA/EIA/EIA/WB']));
            }
            if (trim($this->result['shipment']['dbsPieChart']['EIA/EIA/EIA']) != "") {
                $dataSet->addPoint(new Point("EIA/EIA/EIA", $this->result['shipment']['dbsPieChart']['EIA/EIA/EIA']));
            }
            if (trim($this->result['shipment']['dbsPieChart']['EIA/EIA/WB']) != "") {
                $dataSet->addPoint(new Point("EIA/EIA/WB", $this->result['shipment']['dbsPieChart']['EIA/EIA/WB']));
            }
            if (trim($this->result['shipment']['dbsPieChart']['EIA/EIA']) != "") {
                $dataSet->addPoint(new Point("EIA/EIA", $this->result['shipment']['dbsPieChart']['EIA/EIA']));
            }
            if (trim($this->result['shipment']['dbsPieChart']['EIA/WB']) != "") {
                $dataSet->addPoint(new Point("EIA/WB", $this->result['shipment']['dbsPieChart']['EIA/WB']));
            }
            if (trim($this->result['shipment']['dbsPieChart']['EIA']) != "") {
                $dataSet->addPoint(new Point("EIA", $this->result['shipment']['dbsPieChart']['EIA']));
            }
            $piechart = UPLOAD_PATH . DIRECTORY_SEPARATOR . 'reports' . DIRECTORY_SEPARATOR . $fileSafeShipmentCode . DIRECTORY_SEPARATOR . 'pieChart.png';
            $chart->setDataSet($dataSet);

            $chart->setTitle("HIV Testing Algorithms used for DBS-based PE survey " . $this->result['shipment']['distribution_code']);
            $chart->render($piechart);

            $pdf->Image($piechart, 5, $y, '', '', '', '', '', false, 300);
            if (file_exists($piechart)) {
                unlink($piechart);
            }
        }
    }

    if ($this->result['shipment']['scheme_type'] == 'dts' &&
        isset($this->responseResult) && count($this->responseResult) > 0 &&
        $this->responseResult != '') {
        $y = $pdf->getY() + 5;
        $chart1 = new PieChart(700, 400);
        $dataSet = new XYDataSet();

        $passed = $this->responseResult["number_passed"];
        $failed = $this->responseResult["number_failed"];
        $notResponded = $this->responseResult["others"];
        $late = $this->responseResult["number_late"];
        $excluded = $this->responseResult["excluded"];
        $dataSet->addPoint(new Point("Passed (N=$passed)", $passed));
        $dataSet->addPoint(new Point("Failed (N=$failed)", $failed));
        $dataSet->addPoint(new Point("Not Responded (N=$notResponded)", $notResponded));
        $dataSet->addPoint(new Point("Late Response (N=$late)", $late));
        $dataSet->addPoint(new Point("Excluded (N=$excluded)", $excluded));

        $performancePiechart = UPLOAD_PATH . DIRECTORY_SEPARATOR . 'reports' . DIRECTORY_SEPARATOR . $this->responseResult["shipment_code"] . DIRECTORY_SEPARATOR . 'performanceChart.png';

        $chart1->setDataSet($dataSet);
        $chart1->setTitle("Shipment Participant Result Report");
        $chart1->render($performancePiechart);
        $pdf->Image($performancePiechart, 5, $y, '', '', '', '', '', false, 300);
        if (file_exists($performancePiechart)) {
            unlink($performancePiechart);
        }
    }
    //Close and output PDF document
    $fileName = $fileSafeShipmentCode . "-summary.pdf";
    $filePath = $shipmentFolderPath . DIRECTORY_SEPARATOR . $fileName;
    $pdf->Output($filePath, "F");

    //============================================================+
    // END OF FILE
    //============================================================+
    echo "success";
}
