<?php
require_once('tcpdf/tcpdf.php');
$schemeType = $this->result['shipment'][0]['scheme_type'];
$pdfNew = new Zend_Pdf();
$extractor = new Zend_Pdf_Resource_Extractor();
$font = Zend_Pdf_Font::fontWithName(Zend_Pdf_Font::FONT_HELVETICA);
$shipmentCode = '';
$dtsResults = array();
foreach ($this->possibleDtsResults as $pr) {
    $dtsResults[$pr['id']] = ucfirst(strtolower($pr['response']));
}

if (sizeof($this->result['shipment']) > 0) {
    $reportsFolderPath = UPLOAD_PATH . DIRECTORY_SEPARATOR . 'reports';
    if (!file_exists($reportsFolderPath) && !is_dir($reportsFolderPath)) {
        mkdir($reportsFolderPath);
    }
    class MYPDF extends TCPDF {
        public $scheme_name = '';
        public $result = array();
        public function setSchemeName($header, $schemeName, $logo, $logoRight, $comingFrom, $schemeType) {
            $this->scheme_name = $schemeName;
            $this->header = $header;
            $this->logo = $logo;
            $this->logoRight = $logoRight;
            $this->comingFrom = $comingFrom;
            $this->schemeType = $schemeType;
        }

        //Page header
        public function Header() {
            $html = '<h3 style="background-color:#000000;color:#ffffff;font-weight: bold;text-align:center;"><span style="font-size:5px;"><br /></span>';
            $html .= 'CDC/ILB XPERT TB PROFICIENCY TESTING PROGRAM: INDIVIDUAL FINAL REPORT</h3>';
            $html .= '<h3 style="width:100%;text-align:center;margin: 0;padding:0;">'.$this->result['distribution_code'].'</h3>';
            $html .= '<table cellpadding="2" style="width:100%;font-size:8pt;">';
            $html .= '    <tr>';
            $html .= '	     <td style="border-top:solid 10px #000000;border-bottom:solid 10px #000000;background-color:#777777;color:#ffffff;text-align:center;width:20%;"><strong>Country</strong></td>';
            $html .= '	     <td style="border-top:solid 10px #000000;border-bottom:solid 10px #000000;background-color:#777777;color:#ffffff;text-align:center;width:50%;"><strong>Testing Site</strong></td>';
            $html .= '	     <td style="border-top:solid 10px #000000;border-bottom:solid 10px #000000;background-color:#777777;color:#ffffff;text-align:center;width:15%;"><strong>PT-ID Number</strong></td>';
            $html .= '	     <td style="border-top:solid 10px #000000;border-bottom:solid 10px #000000;background-color:#777777;color:#ffffff;text-align:center;width:15%;"><strong>Page Number</strong></td>';
            $html .= '    </tr>';
            $html .= '    <tr>';
            $html .= '	     <td style="text-align:center;border-bottom:solid 10px #000000;">'.$this->result['country_name'].'</td>';
            $html .= '	     <td style="text-align:center;border-bottom:solid 10px #000000;">'.$this->result['lab_name'];
            if ($this->result['is_excluded'] == 'yes') {
                $html .= '       <span style="color:#ff0000;">(Excluded)</span>';
            }
            $html .= '       </td>';
            $html .= '	     <td style="text-align:center;border-bottom:solid 10px #000000;">'.$this->result['unique_identifier'].'</td>';
            $html .= '	     <td style="text-align:center;border-bottom:solid 10px #000000;">'.$this->getAliasNumPage().'/3</td>';
            $html .= '    </tr>';
            $html .= '</table>';
            $this->writeHTMLCell(0, 10, 15, 20, $html, 0, 0, 0, true, 'J', true);
        }

        // Page footer
        public function Footer() {
            $finalizeReport="";
            if (trim($this->comingFrom)=="finalize") {
                $finalizeReport=' - FINALIZED';
            }
            // Position at 15 mm from bottom
            $this->SetY(-15);
            // Set font
            $this->SetFont('Helvetica', '', 8);
            // Page number
            $this->Cell(0, 10, 'Form: ILB-500-F29A', 0, false, 'L', 0, '', 0, false, 'T', 'M');
            // Generated at....
            $this->Cell(0, 10, "CDC/ILB is currently preparing for accreditation by A2LA to the ISO 17043 Standard", 0, false, 'R', 0, '', 0, false, 'T', 'M');
        }

        public function writeHTMLTogether($html, $ln=true, $fill=false, $reseth=false, $cell=false, $align='') {
            $cp =  $this->getPage();
            $this->startTransaction();

            $this->writeHTML($html, $ln, $fill, $reseth, $cell, $align);

            if ($this->getPage() > $cp) {
                $this->rollbackTransaction(true);//true is very important
                $this->AddPage();
                $this->writeHTML($html, $ln, $fill, $reseth, $cell, $align);
            } else {
                $this->commitTransaction();
            }
        }
    }

    $totalPages = count($this->result['shipment']);
    $j = 1;

    $tbResultValueMapping = array(
        'detected' => 'Detected',
        'high' => 'High',
        'medium' => 'Medium',
        'low' => 'Low',
        'veryLow' => 'Very Low',
        'trace' => 'Trace',
        'notDetected' => 'Not Detected',
        'detected' => 'Detected',
        'noResult' => 'No Result',
        'na' => 'N/A',
        'indeterminate' => 'Indeterminate',
        'invalid' => 'Invalid',
        'error' => 'Error',
        '' => ''
    );

    $attestation = '<div>';
    $attestation .= '    <h5>Documentation of Report Review</h5>';
    $attestation .= '    <p style="width:100%;font-size:10pt;">We the undersigned, have read and reviewed the above Xpert MTB performance evaluation report.  If the final score is less than 100% we have downloaded the root cause analysis and corrective actions forms from ePT, completed, and attached them to this report. Performance report and any attachments must be filed and retained as documentation.</p>';
    $attestation .= '    <p style="width:100%;font-size:10pt;">Laboratory Manager (or Designee) _______________________________ Date:________________________</p>';
    $attestation .= '    <p style="width:100%;font-size:10pt;">Testing Personnel ____________________________________________ Date:________________________</p>';
    $attestation .= '    <p style="width:100%;font-size:10pt;">';
    $attestation .= '&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;';
    $attestation .= '____________________________________________ Date:________________________</p>';
    $attestation .= '</div>';

    foreach ($this->result['shipment'] as $result) {
        $fileSafeShipmentCode = str_replace( ' ', '-', str_replace(array_merge(
            array_map('chr', range(0, 31)),
            array('<', '>', ':', '"', '/', '\\', '|', '?', '*')
            ), '', $result['shipment_code']));
        $shipmentFolderPath = $reportsFolderPath . DIRECTORY_SEPARATOR . $fileSafeShipmentCode;
        if (!file_exists($shipmentFolderPath) || !is_dir($shipmentFolderPath)) {
            mkdir($shipmentFolderPath);
        }

        // create new PDF document
        $pdf = new MYPDF(PDF_PAGE_ORIENTATION, PDF_UNIT, PDF_PAGE_FORMAT, true, 'UTF-8', false);

        $pdf->result = $result;
        $pdf->setSchemeName($this->header,$result['scheme_name'],
            $this->logo, $this->logoRight, $this->comingFrom, $schemeType);

        // set default header data
        $pdf->SetHeaderData(PDF_HEADER_LOGO, PDF_HEADER_LOGO_WIDTH, PDF_HEADER_TITLE,
            PDF_HEADER_STRING);

        // set header and footer fonts
        $pdf->setHeaderFont(Array(PDF_FONT_NAME_MAIN, '', PDF_FONT_SIZE_MAIN));
        $pdf->setFooterFont(Array(PDF_FONT_NAME_DATA, '', PDF_FONT_SIZE_DATA));

        // set default monospaced font
        $pdf->SetDefaultMonospacedFont(PDF_FONT_MONOSPACED);

        $pdf->SetMargins(PDF_MARGIN_LEFT, 50, PDF_MARGIN_RIGHT);
        $pdf->SetHeaderMargin(1);
        $pdf->SetFooterMargin(1);

        // set auto page breaks
        $pdf->SetAutoPageBreak(TRUE, PDF_MARGIN_BOTTOM);

        // set image scale factor
        $pdf->setImageScale(PDF_IMAGE_SCALE_RATIO);

        // set font
        $pdf->SetFont('Helvetica', '', 11);

        // add a page
        $pdf->AddPage();

        if (trim($result['shipment_date']) != "") {
            $result['shipment_date'] = $this->dateFormat($result['shipment_date']);
        }
        if (trim($result['lastdate_response']) != "") {
            $result['lastdate_response'] = $this->dateFormat($result['lastdate_response']);
        }

        $config = new Zend_Config_Ini(APPLICATION_PATH . DIRECTORY_SEPARATOR . "configs" . DIRECTORY_SEPARATOR . "config.ini", APPLICATION_ENV);
        $responseDate = "";
        $shipmentTestDate = "";
        $shipmentScore = 0;
        $documentationScore = 0;
        $score = 0;

        if (isset($result['responseResult'][0]['responseDate']) &&
            trim($result['responseResult'][0]['responseDate'])!="") {
            $splitDate = explode(" ",$result['responseResult'][0]['responseDate']);
            $responseDate = $this->dateFormat($splitDate[0]);
        }
        $attributes='';
        if (isset($result['responseResult'][0]['attributes'])) {
            $attributes = json_decode($result['responseResult'][0]['attributes'], true);
        }

        $sampleRehydrationDate = "";
        if (isset($attributes['sample_rehydration_date']) &&
            trim($attributes['sample_rehydration_date'])!="") {
            $sampleRehydrationDate = $this->dateFormat($attributes['sample_rehydration_date']);
        }
        $shipmentReceiptDate = "";
        if (isset($result['responseResult'][0]['shipment_receipt_date']) && trim($result['responseResult'][0]['shipment_receipt_date'])!="") {
            $shipmentReceiptDate = $this->dateFormat($result['responseResult'][0]['shipment_receipt_date']);
        }

        if (isset($result['responseResult'][0]['shipment_test_date']) && trim($result['responseResult'][0]['shipment_test_date']) != "") {
            $shipmentTestDate = $this->dateFormat($result['responseResult'][0]['shipment_test_date']);
        }

        $labInfo = '<table cellpadding="2" style="width:100%;font-size:8pt;">';
        $labInfo .= '    <tr>';
        $labInfo .= '	     <td style="border-top:solid 10px #000000;border-bottom:solid 10px #000000;background-color:#777777;color:#ffffff;text-align:center;width:40%;"><strong>Instrument SN</strong></td>';
        $labInfo .= '	     <td style="border-top:solid 10px #000000;border-bottom:solid 10px #000000;background-color:#777777;color:#ffffff;text-align:center;width:30%;"><strong>Last Calibration Date</strong></td>';
        $labInfo .= '	     <td style="border-top:solid 10px #000000;border-bottom:solid 10px #000000;background-color:#777777;color:#ffffff;text-align:center;width:30%;"><strong>Result Submission Date</strong></td>';
        $labInfo .= '    </tr>';
        foreach ($result['instrumentsUsed'] as $instrumentUsed) {
            $labInfo .= '    <tr>';
            $labInfo .= '	     <td style="text-align:center;border-bottom:solid 10px #000000;">'.$instrumentUsed['instrument_serial'].'</td>';
            $labInfo .= '	     <td style="text-align:center;border-bottom:solid 10px #000000;">'.Pt_Commons_General::dbDateToString($instrumentUsed['instrument_last_calibrated_on']).'</td>';
            $labInfo .= '	     <td style="text-align:center;border-bottom:solid 10px #000000;">'.Pt_Commons_General::dbDateToString($result['result_submission_date']).'</td>';
            $labInfo .= '    </tr>';
        }
        $labInfo .= '</table>';
        $pdf->writeHTML($labInfo, true, false, true, false, '');

        if (isset($result['responseResult']) && sizeof($result['responseResult']) > 0) {
            $labRes = '<table cellpadding="1" style="width:100%;font-size:8pt;">';
            $labRes .= '    <tr style="background-color:#777777;color:#ffffff;">';
            $labRes .= '	     <td style="text-align:center;border-top:solid 10px #000000;border-bottom:solid 10px #000000;" colspan="4"><strong>Site Results</strong></td>';
            $labRes .= '    </tr>';
            $labRes .= '    <tr>';
            $labRes .= '	     <td style="width:46%;border-bottom:solid 10px #000000;"></td>';
            $labRes .= '	     <td style="width:22%;border-bottom:solid 10px #000000;text-align:center;"><strong>MTB Detected</strong></td>';
            $labRes .= '	     <td style="width:22%;border-bottom:solid 10px #000000;text-align:center;"><strong>RIF Resistance</strong></td>';
            $labRes .= '	     <td style="width:10%;border-bottom:solid 10px #000000;text-align:center;"><strong>Score</strong></td>';
            $labRes .= '    </tr>';
            $scoreTotal = 0;
            $maxScoreTotal = 0;
            $exclusionCount = 0;
            $discrepantResultInSubmission = false;
            $noResultOrError2127InSubmission = false;
            foreach ($result['responseResult'] as $response) {
                if ($response['ref_is_excluded'] == 'yes' &&
                    isset($response['ref_excluded_reason']) &&
                    trim($response['ref_excluded_reason']) != "") {
                    $exclusionCount++;
                }
                $labRes .= '    <tr>';
                $labRes .= '	     <td style="background-color:#cccccc;width:100%;" colspan="4"><strong>Sample ID: '.$response['sample_label'];
                if ($response['ref_is_excluded'] == 'yes' &&
                    isset($response['ref_excluded_reason']) &&
                    trim($response['ref_excluded_reason']) != "") {
                    for ($excludedReasonIndex = 0; $excludedReasonIndex < $exclusionCount; $excludedReasonIndex++) {
                        $labRes .= '*';
                    }
                }
                $labRes .= '</strong></td>';
                $labRes .= '    </tr>';
                $labRes .= '    <tr>';
                $labRes .= '	     <td style="width:46%;">Expected Results</td>';
                $labRes .= '	     <td style="width:22%;text-align:center;">'.$tbResultValueMapping[$response['expected_mtb_detected']].'</td>';
                $labRes .= '	     <td style="width:22%;text-align:center;">'.$tbResultValueMapping[$response['expected_rif_resistance']].'</td>';
                $labRes .= '	     <td style="width:10%;"></td>';
                $labRes .= '    </tr>';
                $labRes .= '    <tr>';
                $labRes .= '	     <td style="width:46%;">Consensus Results</td>';
                $labRes .= '	     <td style="width:22%;text-align:center;">'.$tbResultValueMapping[$response['consensus_mtb_detected']].'</td>';
                $labRes .= '	     <td style="width:22%;text-align:center;">'.$tbResultValueMapping[$response['consensus_rif_resistance']].'</td>';
                $labRes .= '	     <td style="width:10%;">';
                if ($response['ref_is_excluded'] == 'yes') {
                    if ($response['ref_is_exempt'] == 'yes') {
                        $labRes .= '<span style="color:#ffa500;">(Exempt)</span>';
                    } else {
                        $labRes .= '<span style="color:#ff0000;">(Excluded)</span>';
                    }
                }
                $labRes .= '</td>';
                $labRes .= '    </tr>';
                if ($response["discrepant_result"]) {
                    $discrepantResultInSubmission = true;
                    $labRes .= '    <tr style="color: #ff0000;">';
                } else {
                    $labRes .= '    <tr>';
                }
                if ($tbResultValueMapping[$response['mtb_detected']] == "No Result" ||
                    $response['error_code'] == "2127") {
                    $noResultOrError2127InSubmission = true;
                }
                $labRes .= '	     <td style="width:46%;"><strong>'.$result['lab_name'].'</strong></td>';
                if ($response['mtb_detected'] == 'error') {
                    $labRes .= '	     <td style="width:22%;text-align:center;"><strong>Error: '.$response['error_code'].'</strong></td>';
                    $labRes .= '	     <td style="width:22%;text-align:center;"></td>';
                } else {
                    $labRes .= '	     <td style="width:22%;text-align:center;"><strong>'.$tbResultValueMapping[$response['mtb_detected']].'</strong></td>';
                    $labRes .= '	     <td style="width:22%;text-align:center;"><strong>'.$tbResultValueMapping[$response['rif_resistance']].'</strong></td>';
                }
                $labRes .= '	     <td style="width:10%;text-align:center;"><strong>'.$response['score'].'</strong></td>';
                $labRes .= '    </tr>';
            }
            $labRes .= '    <tr>';
            $labRes .= '	     <td style="width:46%;border-top: solid 10px #000000;"></td>';
            $labRes .= '	     <td style="width:22%;border-top: solid 10px #000000;border-bottom: solid 10px #000000;text-align:center;"><strong>Percentage</strong></td>';
            $labRes .= '	     <td style="width:22%;border-top: solid 10px #000000;border-bottom: solid 10px #000000;text-align:center;"><strong>Satisfactory/Unsatisfactory</strong></td>';
            $labRes .= '	     <td style="width:10%;border-top: solid 10px #000000;"></td>';
            $labRes .= '    </tr>';
            $labRes .= '    <tr>';
            $labRes .= '	     <td style="width:46%;background-color:#B6DDE8;border-bottom: solid 10px #000000;border-right: solid 10px #ffffff;"><strong>FINAL SCORE</strong></td>';
            $labRes .= '	     <td style="width:22%;background-color:#B6DDE8;border-top: solid 10px #000000;border-bottom: solid 10px #000000;text-align:center;"><strong>'.round(($result['shipment_score'] / $result['max_shipment_score']) * 100, 1).'</strong></td>';
            $labRes .= '	     <td style="width:22%;background-color:#B6DDE8;border-top: solid 10px #000000;border-bottom: solid 10px #000000;text-align:center;"><strong>'.($result['submission_score_status'] == 'fail' ? 'Unsatisfactory' : 'Satisfactory').'</strong></td>';
            $labRes .= '	     <td style="width:10%;border-top: solid 10px #000000;"></td>';
            $labRes .= '    </tr>';
            foreach ($result['responseResult'] as $response) {
                if ($response['ref_is_excluded'] == 'yes' &&
                    isset($response['ref_excluded_reason']) &&
                    trim($response['ref_excluded_reason']) != "") {
                    $labRes .= '    <tr>';
                    $labRes .= '        <td colspan="4">';
                    $labRes .= '            <strong>';
                    for ($excludedReasonIndex = 0; $excludedReasonIndex < $exclusionCount; $excludedReasonIndex++) {
                        $labRes .= '*';
                    }
                    $labRes .= '            </strong> ' . $response['ref_excluded_reason'];
                    $labRes .= '        </td>';
                    $labRes .= '    </tr>';
                }
            }
            $labRes .= '</table>';
            $pdf->writeHTML($labRes, true, false, true, false, '');
            $commentsSection = null;
            if ((isset($result['eval_comment']) && $result['eval_comment'] != '') ||
                (isset($result['optional_eval_comment']) && $result['optional_eval_comment'] != '') ||
                (isset($result['shipment_comment']) && $result['shipment_comment'] != '') ||
                $discrepantResultInSubmission || isset($result['cartridge_expired_on']) ||
                $noResultOrError2127InSubmission ||
                (isset($result['instrument_requires_calibration']) && $result['instrument_requires_calibration']) ||
                !isset($result['supervisor_approval']) || $result['supervisor_approval'] == '' || $result['supervisor_approval'] == 'no' ||
                !isset($result['qc_done_on_time']) || !$result['qc_done_on_time'] ||
                (isset($result['ptNotTestedComment']) && $result['ptNotTestedComment'] != '')) {
                $commentsSection = '<br />';
                $commentsSection .= '<table cellpadding="2" style="width:100%;font-size:8pt;">';
                $commentsSection .= '    <tr style="background-color:#777777;color:#ffffff;">';
                $commentsSection .= '	     <td style="text-align:center;border-top:solid 10px #000000;border-bottom:solid 10px #000000;"><strong>Comments</strong></td>';
                $commentsSection .= '    </tr>';
                $allComments = array();
                if (isset($result['eval_comment']) && $result['eval_comment'] !== '') {
                    array_push($allComments, $result['eval_comment']);
                }
                if (isset($result['optional_eval_comment']) && $result['optional_eval_comment'] !== '') {
                    array_push($allComments, $result['optional_eval_comment']);
                }
                if (isset($result['shipment_comment']) && $result['shipment_comment'] !== '') {
                    array_push($allComments, $result['shipment_comment']);
                }
                if (isset($result['ptNotTestedComment']) && $result['ptNotTestedComment'] != '') {
                    array_push($allComments, $result['ptNotTestedComment']);
                } else {
                    if ($discrepantResultInSubmission) {
                        array_push($allComments, 'Red highlighted results represent discrepancies between actual and expected results.');
                    }
                    if ($result['cartridge_expired_on']) {
                        array_push($allComments, 'Xpert cartridge kit expired '.Pt_Commons_General::dbDateToString($result['cartridge_expired_on']).'. Use of expired reagents could lead to incorrect reporting of clinical results.'.$result['tests_done_on_expired_cartridges']);
                    }
                    if ($noResultOrError2127InSubmission) {
                        array_push($allComments, 'Check computer software GeneXpert Dx to ensure software is not freezing during testing. Check uninterrupted power supply (UPS) to ensure it is capable of sustaining power to GeneXpert for a minimum of 2 hours should an electrical power outage occur. If UPS is unable to sustain GeneXpert instrument for 2 hours request sufficient UPS that will provide power to GeneXpert instrument for no less than 2 hours to enable current run completion in the event of a power outage.');
                    }
                    if ($result['instrument_requires_calibration']) {
                        array_push($allComments, 'Calibration is an important maintenance procedure to ensure GeneXpert instruments are functioning properly and yielding accurate results. '.$result['tests_done_after_calibration_due'].'Instrument calibration should take place each year or after every 2,000 runs on each instrument module (whichever comes first). Entered data suggest your GeneXpert Instrument is due for calibration. Request an XpertCheck module calibration kit and perform calibration as instructed. Details on how to perform GeneXpert Instrument calibration can be found at <a href="http://www.stoptb.org/wg/gli/TrainingPackage_Xpert_MTB_RIF.asp">http://www.stoptb.org/wg/gli/TrainingPackage_Xpert_MTB_RIF.asp</a> module 10 MAINTENANCE.');
                    }
                    if (!isset($result['qc_done_on_time']) || !$result['qc_done_on_time']) {
                        array_push($allComments, 'Entered data suggest monthly maintenance needs to be performed.  Proper and timely monthly maintenance helps to ensure the longevity and accuracy of the GeneXpert Instrument. Details on how to perform GeneXpert Instrument monthly maintenance can be found at <a href="http://www.stoptb.org/wg/gli/TrainingPackage_Xpert_MTB_RIF.asp">http://www.stoptb.org/wg/gli/TrainingPackage_Xpert_MTB_RIF.asp</a> module 10 MAINTENANCE.');
                    }
                    if (!isset($result['supervisor_approval']) || $result['supervisor_approval'] == '' || $result['supervisor_approval'] == 'no') {
                        array_push($allComments, 'Entered data suggest submitted results were not cross checked by a supervisor or designee.  Supervisory report review is an important step in quality assurance of laboratory testing results and must be incorporated into the workflow of all laboratories to ensure accuracy of all reported results.');
                    }
                }
                if (count($allComments) > 0) {
                    $commentsSection .= '    <tr>';
                    $commentsSection .= '	     <td>';
                    if (count($allComments) > 1) {
                        $commentsSection .= '	         <ul>';
                    }
                    foreach ($allComments as $comment) {
                        if (count($allComments) > 1) {
                            $commentsSection .= '	             <li>';
                        }
                        $commentsSection .= $comment;
                        if (count($allComments) > 1) {
                            $commentsSection .= '	             </li>';
                        }
                    }
                    if (count($allComments) > 1) {
                        $commentsSection .= '             </ul>';
                    }
                    $commentsSection .= '        </td>';
                    $commentsSection .= '    </tr>';
                }
                $commentsSection .= '</table>';
                $pdf->writeHTMLTogether($commentsSection, true, false, true, false, '');
            }
            $correctiveActionsSection = null;
            if (isset($result['corrective_actions']) && count($result['corrective_actions'])  > 0) {
                $correctiveActionsSection = '<br />';
                $correctiveActionsSection .= '<table cellspacing="1" cellpadding="2" style="width:100%;font-size:8pt;">';
                $correctiveActionsSection .= '    <tr style="background-color:#777777;color:#ffffff;">';
                $correctiveActionsSection .= '	     <td style="text-align:center;border-top:solid 10px #000000;border-bottom:solid 10px #000000;" colspan="2"><strong>Corrective Actions Checklist</strong></td>';
                $correctiveActionsSection .= '    </tr>';
                foreach ($result['corrective_actions'] as $correctiveAction) {
                    $correctiveActionsSection .= '    <tr>';
                    $correctiveActionsSection .= '	     <td style="border:solid 10px #000000;width:17px;"></td>';
                    $correctiveActionsSection .= '	     <td>'.$correctiveAction.'</td>';
                    $correctiveActionsSection .= '    </tr>';
                }
                $correctiveActionsSection .= '</table>';
                $pdf->writeHTMLTogether($correctiveActionsSection, true, false, true, false, '');
            }
        }

        if ($schemeType != 'tb') {
            if (trim($result['shipment_score']) != "") {
                if ($result['shipment_score'] != 0) {
                    $shipmentScore = ($result['shipment_score'] / $result['shipment_score']) * 100;
                } else {
                    $result['shipment_score'] = 0;
                }
            }
            $score = ($shipmentScore / (isset($result['responseResult']) ? count($result['responseResult']) : 1)) * 100;

            if (trim($result['shipment_comment']) != "" || trim($result['evaluationComments']) != "" || trim($result['optional_eval_comment']) != "") {
                $comment = '<br/><br/><table border="1" style="width:100%;font-size:13px;" cellpadding="3">';
                if (trim($result['evaluationComments']) != "") {
                    $comment .= '<tr>';
                    $comment .= '<td style="font-weight:bold;width:30%;">Evaluation Comments </td>';
                    $comment .= '<td style="width:70%;">' . $result['evaluationComments'] . '</td>';
                    $comment .= '</tr>';
                }
                if (trim($result['optional_eval_comment']) != "") {
                    $comment .= '<tr>';
                    $comment .= '<td style="font-weight:bold;width:30%;">Specific Comments/Feedback</td>';
                    $comment .= '<td style="width:70%;">' . $result['optional_eval_comment'] . '</td>';
                    $comment .= '</tr>';
                }
                if (trim($result['shipment_comment']) != "") {
                    $comment .= '<tr>';
                    $comment .= '<td style="font-weight:bold;" colspan="2">' . $result['shipment_comment'] . '</td>';
                    $comment .= '</tr>';
                }
                $comment .= '</table>';
                $pdf->writeHTML($comment, true, false, true, false, '');
            }
            if ($schemeType == 'vl') {
                $html = '<p>Thank you for participating in the HIV Viral Load Proficiency Testing Program.</p>';
            } else if ($schemeType == 'eid') {
                $html = '<p>Thank you for participating in HIV-1 Proficiency Testing Program for Early Infant Diagnosis using Dried Blood Spot.</p>';
            } else {
                $html = '<p>Thank you for participating in the ' . ($result['scheme_name']) . ' Proficiency Testing Program.</p>';
            }
            $pdf->writeHTML($html, true, false, true, false, '');
        } else {
            $pdf->writeHTMLTogether($attestation, true, false, true, false, '');
        }

        if (ob_get_contents()) {
            ob_end_clean();
        }

        $fileName = $result['lab_name']."-".$result['map_id'].".pdf";
        $fileName = preg_replace('/[^A-Za-z0-9.]/', '-', $fileName);
        $fileName = str_replace(" ", "-", $fileName);

        $filePath = $shipmentFolderPath . DIRECTORY_SEPARATOR . $fileName;
        $created = $pdf->Output($filePath, "F");

        $loadpdf = Zend_Pdf::load($filePath);

        foreach ($loadpdf->pages as $page) {
            $pdfExtract = $extractor->clonePage($page);
            $pdfNew->pages[] = $pdfExtract;
        }
        $shipmentCode = $result['shipment_code'];
        $j++;
    }

    $mergePdf = $fileSafeShipmentCode . "-" . $this->bulkfileNameVal . "-bulk-participant-report.pdf";
    $mergeFilePath = $shipmentFolderPath . DIRECTORY_SEPARATOR . $mergePdf;
    $pdfNew ->save($mergeFilePath);

    foreach ($this->result['dmResult'] as $key=>$dmRes) {
        $pdfNew->pages = array();
        $expRes = explode("$",$dmRes);
        $resCount = count($expRes);
        if ($resCount > 0) {
            foreach ($expRes as $res) {
                $expStrRes = explode("#", $res);
                $dmFileName = $key . "-dm.pdf";
                $participantFileName = $key . "-participant.pdf";
                if (count($expStrRes) > 0) {
                    $dmFileName = $expStrRes[0] . $key . ".pdf";
                }
                if (count($expStrRes) > 2) {
                    $participantFileName = $expStrRes[2].".pdf";
                } else if (count($expStrRes) > 1) {
                    $participantFileName = $expStrRes[1].".pdf";
                } else if (count($expStrRes) > 0) {
                    $participantFileName = $expStrRes[0].".pdf";
                }
                $participantFileName = preg_replace('/[^A-Za-z0-9.]/', '-', $participantFileName);
                $participantFileName = str_replace(" ", "-", $participantFileName);
                $filePath = $shipmentFolderPath . DIRECTORY_SEPARATOR . $participantFileName;

                $loadpdf = Zend_Pdf::load($filePath);
                foreach ($loadpdf->pages as $page) {
                    $pdfExtract = $extractor->clonePage($page);
                    $pdfNew->pages[] = $pdfExtract;
                }
            }
        }

        $dmFileName = preg_replace('/[^A-Za-z0-9.]/', '-', $dmFileName);
        $dmFileName = str_replace(" ", "-", $dmFileName);

        $mergePdf = $fileSafeShipmentCode . "-" . $dmFileName;
        $mergeFilePath = $shipmentFolderPath . DIRECTORY_SEPARATOR . $mergePdf;
        $pdfNew->save($mergeFilePath);
    }

    //============================================================+
    // END OF FILE
    //============================================================+
    echo "success";
}
